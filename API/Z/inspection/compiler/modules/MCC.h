/* Zeta API - Z/inspection/compiler/modules/MCC.h
 ______ ____________  ___
|__   /|  ___|__  __|/   \
  /  /_|  __|  |  | /  *  \
 /_____|_____| |__|/__/ \__\
Copyright (C) 2006-2022 Manuel Sainz de Baranda y GoÃ±i.
Released under the terms of the GNU Lesser General Public License v3. */

#ifndef Z_inspection_compiler_modules_MCC_H
#define Z_inspection_compiler_modules_MCC_H

/* MARK: - Identification */

#define Z_COMPILER_IS_MCC	  TRUE
#define Z_COMPILER_NAME		  Z_COMPILER_NAME_MCC
#define Z_COMPILER_VERSION	  Z_VERSION(__MCC_VERSION_MAJOR__, __MCC_VERSION_MINOR__, __MCC_VERSION_MICRO__)
#define Z_COMPILER_VERSION_STRING __MCC_VERSION__

/* MARK: - ISA */

#if __isa::is("x86-32")
#	define Z_COMPILER_ISA Z_ISA_X86_32

#elif __isa::is("x86-64")
#	define Z_COMPILER_ISA Z_ISA_X86_64
#endif

/* MARK: - ISA: Integral endianness */

#if __integral_endianness::is("big")
#	define Z_COMPILER_ISA_INTEGRAL_ENDIANNESS Z_ENDIANNESS_BIG

#elif __integral_endianness::is("little")
#	define Z_COMPILER_ISA_INTEGRAL_ENDIANNESS Z_ENDIANNESS_LITTLE
#endif

/* MARK: - Platform */

/*#define Z_COMPILER_PLATFORM*/

/* MARK: - OS */

#if __os::is("Linux")
#	define Z_COMPILER_OS Z_OS_LINUX

#elif __os::is("macOS")
#	define Z_COMPILER_OS Z_OS_MAC_OS_X

#elif __os::is("Windows")
#	define Z_COMPILER_OS Z_OS_WINDOWS
#endif

/* MARK: - Bit field order */

/*#define Z_COMPILER_BIT_FIELD_ORDER_ALL*/
/*#define Z_COMPILER_BIT_FIELD_ORDER_8BIT*/
/*#define Z_COMPILER_BIT_FIELD_ORDER_16BIT*/
/*#define Z_COMPILER_BIT_FIELD_ORDER_32BIT*/
/*#define Z_COMPILER_BIT_FIELD_ORDER_64BIT*/
/*#define Z_COMPILER_BIT_FIELD_ORDER_128BIT*/

/* MARK: - Data model */

#if __data_model::is("ILP32")
#	define Z_COMPILER_DATA_MODEL Z_DATA_MODEL_ILP32

#elif __data_model::is("LLP64")
#	define Z_COMPILER_DATA_MODEL Z_DATA_MODEL_LLP64

#elif __data_model::is("LP64")
#	define Z_COMPILER_DATA_MODEL Z_DATA_MODEL_LP64
#endif

/* MARK: - Floating-point */

/*#define Z_COMPILER_FIXED_FUNDAMENTAL_FLOAT*/
/*#define Z_COMPILER_FIXED_FUNDAMENTAL_DOUBLE*/
/*#define Z_COMPILER_FIXED_FUNDAMENTAL_LDOUBLE*/
/*#define Z_COMPILER_FIXED_FUNDAMENTAL_FLOAT32X*/
/*#define Z_COMPILER_FIXED_FUNDAMENTAL_FLOAT64X*/
/*#define Z_COMPILER_FIXED_FUNDAMENTAL_FLOAT128X*/
/*#define Z_COMPILER_FIXED_FUNDAMENTAL_DECIMAL64X*/
/*#define Z_COMPILER_FIXED_FUNDAMENTAL_DECIMAL128X*/

/* MARK: - Language: K&R C */

#define Z_COMPILER_C_HAS_OLD_STYLE_FUNCTION	TRUE
#define Z_COMPILER_C_HAS_OPERATOR_SIZEOF	TRUE
#define Z_COMPILER_C_HAS_STORAGE_CLASS_AUTO	TRUE
#define Z_COMPILER_C_HAS_STORAGE_CLASS_EXTERN	TRUE
#define Z_COMPILER_C_HAS_STORAGE_CLASS_REGISTER TRUE
#define Z_COMPILER_C_HAS_STORAGE_CLASS_STATIC	TRUE

#if __has_type(double)
#	define Z_COMPILER_C_HAS_TYPE_DOUBLE TRUE
#endif

#if __has_type(float)
#	define Z_COMPILER_C_HAS_TYPE_FLOAT TRUE
#endif

/* MARK: - Language: C89 */

#define Z_COMPILER_C_HAS_CONSTANT_INITIALIZATION_FOR_LOCAL_AGGREGATE TRUE
#define Z_COMPILER_C_HAS_CONSTANT_INITIALIZATION_FOR_UNION	     TRUE
#define Z_COMPILER_C_HAS_CONSTRUCT_AS_FUNCTION_ARGUMENT		     TRUE
#define Z_COMPILER_C_HAS_CONSTRUCT_RETURN			     TRUE
#define Z_COMPILER_C_HAS_CONSTRUCT_ASSIGNMENT			     TRUE
#define Z_COMPILER_C_HAS_CONSTRUCT_NAMESPACE			     TRUE
#define Z_COMPILER_C_HAS_ENUMERATION				     TRUE
#define Z_COMPILER_C_HAS_FUNCTION_POINTER_AUTODEREFERENCING	     TRUE
#define Z_COMPILER_C_HAS_FUNCTION_PROTOTYPE			     TRUE
#define Z_COMPILER_C_HAS_INTEGRAL_SWITCH			     TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_INDENTATION		     TRUE
#define Z_COMPILER_C_HAS_REMOVAL_OF_ENTRY_AS_KEYWORD		     TRUE
#define Z_COMPILER_C_HAS_REMOVAL_OF_LONG_FLOAT_AS_TYPE		     TRUE
#define Z_COMPILER_C_HAS_STRING_LITERAL_CONCATENATION		     TRUE
#define Z_COMPILER_C_HAS_TRIGRAPHS				     TRUE
#define Z_COMPILER_C_HAS_VALUE_PRESERVING_UNSIGNED_CONVERSION	     TRUE
#define Z_COMPILER_C_HAS_ESCAPE_SEQUENCE_ALERT			     TRUE
#define Z_COMPILER_C_HAS_ESCAPE_SEQUENCE_HEXADECIMAL		     TRUE
#define Z_COMPILER_C_HAS_ESCAPE_SEQUENCE_VERTICAL_TAB		     TRUE
#define Z_COMPILER_C_HAS_LITERAL_FLOAT				     TRUE
#define Z_COMPILER_C_HAS_LITERAL_LONG_DOUBLE			     TRUE
#define Z_COMPILER_C_HAS_LITERAL_UNSIGNED			     TRUE
#define Z_COMPILER_C_HAS_LITERAL_WCHAR_T_CHARACTER		     TRUE
#define Z_COMPILER_C_HAS_LITERAL_WCHAR_T_STRING			     TRUE
#define Z_COMPILER_C_HAS_OPERATOR_UNARY_PLUS			     TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_DIRECTIVE_NULL		     TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_DIRECTIVE_ELIF		     TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_DIRECTIVE_ERROR		     TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_DIRECTIVE_LINE		     TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_DIRECTIVE_PRAGMA		     TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_OPERATOR_DEFINED		     TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_OPERATOR_PASTING		     TRUE
#define Z_COMPILER_C_HAS_PREPROCESSOR_OPERATOR_STRINGIZING	     TRUE
#define Z_COMPILER_C_HAS_TYPE_UNSIGNED_CHAR			     TRUE
#define Z_COMPILER_C_HAS_TYPE_UNSIGNED_LONG			     TRUE
#define Z_COMPILER_C_HAS_TYPE_UNSIGNED_SHORT			     TRUE
#define Z_COMPILER_C_HAS_TYPE_VOID				     TRUE
#define Z_COMPILER_C_HAS_TYPE_VOID_POINTER			     TRUE
#define Z_COMPILER_C_HAS_TYPE_MODIFIER_SIGNED			     TRUE
#define Z_COMPILER_C_HAS_TYPE_QUALIFIER_CONST			     TRUE
#define Z_COMPILER_C_HAS_TYPE_QUALIFIER_VOLATILE		     TRUE

#if __has_type(long double)
#	define Z_COMPILER_C_HAS_TYPE_LONG_DOUBLE TRUE
#endif

/* MARK: - Language: C95 */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199409L
#	define Z_COMPILER_C_HAS_DIGRAPHS TRUE
#endif

/* MARK: - Language: C99 */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
#	define Z_COMPILER_C_HAS_COMPOUND_LITERAL				TRUE
#	define Z_COMPILER_C_HAS_CONVERSION_OF_NON_LVALUE_ARRAY_TO_POINTER	TRUE
#	define Z_COMPILER_C_HAS_CPP_STYLE_COMMENT				TRUE
#	define Z_COMPILER_C_HAS_DESIGNATED_INITIALIZATION			TRUE
#	define Z_COMPILER_C_HAS_EMPTY_MACRO_ARGUMENT				TRUE
#	define Z_COMPILER_C_HAS_EXTENDED_IDENTIFIER				TRUE
#	define Z_COMPILER_C_HAS_FLEXIBLE_ARRAY_MEMBER				TRUE
#	define Z_COMPILER_C_HAS_FOR_WITH_DECLARATION				TRUE
#	define Z_COMPILER_C_HAS_IDEMPOTENT_TYPE_QUALIFIERS			TRUE
#	define Z_COMPILER_C_HAS_MIXED_DECLARATIONS_AND_CODE			TRUE
#	define Z_COMPILER_C_HAS_NON_CONSTANT_INITIALIZATION_FOR_LOCAL_AGGREGATE TRUE
#	define Z_COMPILER_C_HAS_PREPROCESSOR_ARITHMETIC_DONE_IN_INTMAX		TRUE
#	define Z_COMPILER_C_HAS_RELIABLE_INTEGER_DIVISION			TRUE
#	define Z_COMPILER_C_HAS_REMOVAL_OF_ILL_FORMED_RETURN			TRUE
#	define Z_COMPILER_C_HAS_REMOVAL_OF_IMPLICIT_FUNCTION_DECLARATION	TRUE
#	define Z_COMPILER_C_HAS_REMOVAL_OF_IMPLICIT_INT				TRUE
#	define Z_COMPILER_C_HAS_STATIC_IN_ARRAY_PARAMETER_DECLARATION		TRUE
#	define Z_COMPILER_C_HAS_TRAILING_COMMA_ALLOWED_IN_ENUMERATION		TRUE
#	define Z_COMPILER_C_HAS_TYPE_QUALIFIERS_IN_ARRAY_PARAMETER_DECLARATION	TRUE
#	define Z_COMPILER_C_HAS_UNIVERSAL_CHARACTER_NAME			TRUE
#	define Z_COMPILER_C_HAS_VARIADIC_MACRO					TRUE
#	define Z_COMPILER_C_HAS_VLA						TRUE
#	define Z_COMPILER_C_HAS_IDENTIFIER_FUNC					TRUE
#	define Z_COMPILER_C_HAS_LITERAL_HEXADECIMAL_FLOATING_POINT		TRUE
#	define Z_COMPILER_C_HAS_PREPROCESSOR_OPERATOR_PRAGMA			TRUE
#	define Z_COMPILER_C_HAS_SPECIFIER_INLINE				TRUE
#	define Z_COMPILER_C_HAS_STD_PRAGMA_CX_LIMITED_RANGE			TRUE
#	define Z_COMPILER_C_HAS_STD_PRAGMA_FENV_ACCESS				TRUE
#	define Z_COMPILER_C_HAS_STD_PRAGMA_FP_CONTRACT				TRUE
#	define Z_COMPILER_C_HAS_TYPE_QUALIFIER_RESTRICT				TRUE
#	define Z_COMPILER_C_HAS_TYPE_MODIFIER_COMPLEX				TRUE
#	define Z_COMPILER_C_HAS_TYPE_MODIFIER_IMAGINARY				TRUE
#endif

#if __has_type(_Bool)
#	define Z_COMPILER_C_HAS_TYPE_BOOL TRUE
#endif

#if __has_type(double _Complex)
#	define Z_COMPILER_C_HAS_TYPE_DOUBLE_COMPLEX TRUE
#endif

#if __has_type(double _Imaginary)
#	define Z_COMPILER_C_HAS_TYPE_DOUBLE_IMAGINARY TRUE
#endif

#if __has_type(float _Complex)
#	define Z_COMPILER_C_HAS_TYPE_FLOAT_COMPLEX TRUE
#endif

#if __has_type(float _Imaginary)
#	define Z_COMPILER_C_HAS_TYPE_FLOAT_IMAGINARY TRUE
#endif

#if __has_type(long double _Complex)
#	define Z_COMPILER_C_HAS_TYPE_LONG_DOUBLE_COMPLEX TRUE
#endif

#if __has_type(long double _Imaginary)
#	define Z_COMPILER_C_HAS_TYPE_LONG_DOUBLE_IMAGINARY TRUE
#endif

#if __has_type(long long)
#	define Z_COMPILER_C_HAS_TYPE_LONG_LONG TRUE
#endif

/* MARK: - Language: C11 */

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#	define Z_COMPILER_C_HAS_ANONYMOUS_STRUCTURE_AS_MEMBER TRUE
#	define Z_COMPILER_C_HAS_ANONYMOUS_UNION_AS_MEMBER     TRUE
#	define Z_COMPILER_C_HAS_GENERIC_SELECTION	      TRUE
#	define Z_COMPILER_C_HAS_STATIC_ASSERTION	      TRUE
#	define Z_COMPILER_C_HAS_TYPEDEF_REDECLARATION	      TRUE
#	define Z_COMPILER_C_HAS_LITERAL_CHAR16_T_CHARACTER    TRUE
#	define Z_COMPILER_C_HAS_LITERAL_CHAR16_T_STRING	      TRUE
#	define Z_COMPILER_C_HAS_LITERAL_CHAR32_T_CHARACTER    TRUE
#	define Z_COMPILER_C_HAS_LITERAL_CHAR32_T_STRING	      TRUE
#	define Z_COMPILER_C_HAS_LITERAL_UTF8_STRING	      TRUE
#	define Z_COMPILER_C_HAS_OPERATOR_ALIGNOF	      TRUE
#	define Z_COMPILER_C_HAS_SPECIFIER_ALIGNAS	      TRUE
#	define Z_COMPILER_C_HAS_SPECIFIER_NORETURN	      TRUE
#	define Z_COMPILER_C_HAS_STORAGE_CLASS_THREAD_LOCAL    TRUE
#	define Z_COMPILER_C_HAS_TYPE_MODIFIER_ATOMIC	      TRUE
#	define Z_COMPILER_C_HAS_TYPE_QUALIFIER_ATOMIC	      TRUE
#endif

/* MARK: - Attributes */

/*#define Z_COMPILER_ATTRIBUTE_ALIAS*/
/*#define Z_COMPILER_ATTRIBUTE_API_ALIAS*/
/*#define Z_COMPILER_ATTRIBUTE_API_EXPORT*/
/*#define Z_COMPILER_ATTRIBUTE_API_IMPORT*/
/*#define Z_COMPILER_ATTRIBUTE_API_EXPORT_ALIAS*/
/*#define Z_COMPILER_ATTRIBUTE_API_WEAK_EXPORT*/
/*#define Z_COMPILER_ATTRIBUTE_EBCO*/
#define Z_COMPILER_ATTRIBUTE_INLINE [[mcc::inline]]
/*#define Z_COMPILER_ATTRIBUTE_NO_RETURN*/
/*#define Z_COMPILER_ATTRIBUTE_NULL_TERMINATED*/
/*#define Z_COMPILER_ATTRIBUTE_PRIVATE*/
/*#define Z_COMPILER_ATTRIBUTE_PUBLIC*/
#define Z_COMPILER_ATTRIBUTE_THREAD_LOCAL [[mcc::thread_local]]
/*#define Z_COMPILER_ATTRIBUTE_WEAK*/

/* MARK: - Built-ins: Constants */

#define Z_COMPILER_CONSTANT_CHAR_BITS	   __type<	   char >::bits
#define Z_COMPILER_CONSTANT_UCHAR_MAXIMUM  __type<unsigned char >::maximum
#define Z_COMPILER_CONSTANT_SCHAR_MAXIMUM  __type<  signed char >::maximum
#define Z_COMPILER_CONSTANT_SCHAR_MINIMUM  __type<  signed char >::minimum
#define Z_COMPILER_CONSTANT_SHORT_BITS	   __type<	   short>::bits
#define Z_COMPILER_CONSTANT_SHORT_SIZE	   __type<	   short>::size
#define Z_COMPILER_CONSTANT_USHORT_MAXIMUM __type<unsigned short>::maximum
#define Z_COMPILER_CONSTANT_SSHORT_MAXIMUM __type<	   short>::maximum
#define Z_COMPILER_CONSTANT_SSHORT_MINIMUM __type<	   short>::minimum
#define Z_COMPILER_CONSTANT_INT_BITS	   __type<	   int	>::bits
#define Z_COMPILER_CONSTANT_INT_SIZE	   __type<	   int	>::size
#define Z_COMPILER_CONSTANT_UINT_MAXIMUM   __type<unsigned int	>::maximum
#define Z_COMPILER_CONSTANT_SINT_MAXIMUM   __type<	   int	>::maximum
#define Z_COMPILER_CONSTANT_SINT_MINIMUM   __type<	   int	>::minimum
#define Z_COMPILER_CONSTANT_LONG_BITS	   __type<	   long >::bits
#define Z_COMPILER_CONSTANT_LONG_SIZE	   __type<	   long >::size
#define Z_COMPILER_CONSTANT_ULONG_MAXIMUM  __type<unsigned long >::maximum
#define Z_COMPILER_CONSTANT_SLONG_MAXIMUM  __type<	   long >::maximum
#define Z_COMPILER_CONSTANT_SLONG_MINIMUM  __type<	   long >::minimum

#if __has_type(long long)
#	define Z_COMPILER_CONSTANT_LLONG_BITS	  __type<	  long long>::bits
#	define Z_COMPILER_CONSTANT_LLONG_SIZE	  __type<	  long long>::size
#	define Z_COMPILER_CONSTANT_ULLONG_MAXIMUM __type<unsigned long long>::maximum
#	define Z_COMPILER_CONSTANT_SLLONG_MAXIMUM __type<	  long long>::maximum
#	define Z_COMPILER_CONSTANT_SLLONG_MINIMUM __type<	  long long>::minimum
#endif

#define Z_COMPILER_CONSTANT_WCHAR_BITS	  __type<wchar_t>::bits
#define Z_COMPILER_CONSTANT_WCHAR_SIZE	  __type<wchar_t>::size
#define Z_COMPILER_CONSTANT_WCHAR_MAXIMUM __type<wchar_t>::maximum
#define Z_COMPILER_CONSTANT_WCHAR_MINIMUM __type<wchar_t>::minimum

#if __has_type(float)
#	define Z_COMPILER_CONSTANT_FLOAT_BITS	  __type<float>::bits
#	define Z_COMPILER_CONSTANT_FLOAT_SIZE	  __type<float>::size
#	define Z_COMPILER_CONSTANT_FLOAT_INFINITY __type<float>::infinity
#	define Z_COMPILER_CONSTANT_FLOAT_QNAN	  __type<float>::qnan
#	define Z_COMPILER_CONSTANT_FLOAT_SNAN	  __type<float>::snan
#endif

#if __has_type(double)
#	define Z_COMPILER_CONSTANT_DOUBLE_BITS	   __type<double>::bits
#	define Z_COMPILER_CONSTANT_DOUBLE_SIZE	   __type<double>::size
#	define Z_COMPILER_CONSTANT_DOUBLE_INFINITY __type<double>::infinity
#	define Z_COMPILER_CONSTANT_DOUBLE_QNAN	   __type<double>::qnan
#	define Z_COMPILER_CONSTANT_DOUBLE_SNAN	   __type<double>::snan
#endif

#if __has_type(long double)
#	define Z_COMPILER_CONSTANT_LDOUBLE_BITS	    __type<long double>::bits
#	define Z_COMPILER_CONSTANT_LDOUBLE_SIZE	    __type<long double>::size
#	define Z_COMPILER_CONSTANT_LDOUBLE_INFINITY __type<long double>::infinity
#	define Z_COMPILER_CONSTANT_LDOUBLE_QNAN	    __type<long double>::qnan
#	define Z_COMPILER_CONSTANT_LDOUBLE_SNAN	    __type<long double>::snan
#endif

#if __has_type(_Float16)
#	define Z_COMPILER_CONSTANT_FLOAT16_INFINITY __type<_Float16>::infinity
#	define Z_COMPILER_CONSTANT_FLOAT16_QNAN	    __type<_Float16>::qnan
#	define Z_COMPILER_CONSTANT_FLOAT16_SNAN	    __type<_Float16>::snan
#endif

#if __has_type(_Float32)
#	define Z_COMPILER_CONSTANT_FLOAT32_INFINITY __type<_Float32>::infinity
#	define Z_COMPILER_CONSTANT_FLOAT32_QNAN	    __type<_Float32>::qnan
#	define Z_COMPILER_CONSTANT_FLOAT32_SNAN	    __type<_Float32>::snan
#endif

#if __has_type(_Float64)
#	define Z_COMPILER_CONSTANT_FLOAT64_INFINITY __type<_Float64>::infinity
#	define Z_COMPILER_CONSTANT_FLOAT64_QNAN	    __type<_Float64>::qnan
#	define Z_COMPILER_CONSTANT_FLOAT64_SNAN	    __type<_Float64>::snan
#endif

#define Z_COMPILER_CONSTANT_FLOAT128_INFINITY __FLOAT128_INFINITY
#define Z_COMPILER_CONSTANT_FLOAT128_QNAN __FLOAT128_QNAN
#define Z_COMPILER_CONSTANT_FLOAT128_SNAN __FLOAT128_SNAN
#define Z_COMPILER_CONSTANT_FLOAT32X_INFINITY __FLOAT32X_INFINITY
#define Z_COMPILER_CONSTANT_FLOAT32X_QNAN __FLOAT32X_QNAN
#define Z_COMPILER_CONSTANT_FLOAT32X_SNAN __FLOAT32X_SNAN
#define Z_COMPILER_CONSTANT_FLOAT64X_INFINITY __FLOAT64X_INFINITY
#define Z_COMPILER_CONSTANT_FLOAT64X_QNAN __FLOAT64X_QNAN
#define Z_COMPILER_CONSTANT_FLOAT64X_SNAN __FLOAT64X_SNAN
#define Z_COMPILER_CONSTANT_FLOAT128X_INFINITY __FLOAT128X_INFINITY
#define Z_COMPILER_CONSTANT_FLOAT128X_QNAN __FLOAT128X_QNAN
#define Z_COMPILER_CONSTANT_FLOAT128X_SNAN __FLOAT128X_SNAN
#define Z_COMPILER_CONSTANT_DECIMAL32_INFINITY __DECIMAL32_INFINITY
#define Z_COMPILER_CONSTANT_DECIMAL32_QNAN __DECIMAL32_QNAN
#define Z_COMPILER_CONSTANT_DECIMAL32_SNAN __DECIMAL32_SNAN
#define Z_COMPILER_CONSTANT_DECIMAL64_INFINITY __DECIMAL64_INFINITY
#define Z_COMPILER_CONSTANT_DECIMAL64_QNAN __DECIMAL64_QNAN
#define Z_COMPILER_CONSTANT_DECIMAL64_SNAN __DECIMAL64_SNAN
#define Z_COMPILER_CONSTANT_DECIMAL128_INFINITY __DECIMAL128_INFINITY
#define Z_COMPILER_CONSTANT_DECIMAL128_QNAN __DECIMAL128_QNAN
#define Z_COMPILER_CONSTANT_DECIMAL128_SNAN __DECIMAL128_SNAN
#define Z_COMPILER_CONSTANT_DECIMAL64X_INFINITY __DECIMAL64X_INFINITY
#define Z_COMPILER_CONSTANT_DECIMAL64X_QNAN __DECIMAL64X_QNAN
#define Z_COMPILER_CONSTANT_DECIMAL64X_SNAN __DECIMAL64X_SNAN
#define Z_COMPILER_CONSTANT_DECIMAL128X_INFINITY __DECIMAL128X_INFINITY
#define Z_COMPILER_CONSTANT_DECIMAL128X_QNAN __DECIMAL128X_QNAN
#define Z_COMPILER_CONSTANT_DECIMAL128X_SNAN __DECIMAL128X_SNAN
#define Z_COMPILER_CONSTANT_BFP16_INFINITY __BFP16_INFINITY
#define Z_COMPILER_CONSTANT_BFP16_QNAN __BFP16_QNAN
#define Z_COMPILER_CONSTANT_BFP16_SNAN __BFP16_SNAN
#define Z_COMPILER_CONSTANT_BFP32_INFINITY __BFP32_INFINITY
#define Z_COMPILER_CONSTANT_BFP32_QNAN __BFP32_QNAN
#define Z_COMPILER_CONSTANT_BFP32_SNAN __BFP32_SNAN
#define Z_COMPILER_CONSTANT_BFP64_INFINITY __BFP64_INFINITY
#define Z_COMPILER_CONSTANT_BFP64_QNAN __BFP64_QNAN
#define Z_COMPILER_CONSTANT_BFP64_SNAN __BFP64_SNAN
#define Z_COMPILER_CONSTANT_BFP128_INFINITY __BFP128_INFINITY
#define Z_COMPILER_CONSTANT_BFP128_QNAN __BFP128_QNAN
#define Z_COMPILER_CONSTANT_BFP128_SNAN __BFP128_SNAN
#define Z_COMPILER_CONSTANT_DFP32_INFINITY __DFP32_INFINITY
#define Z_COMPILER_CONSTANT_DFP32_QNAN __DFP32_QNAN
#define Z_COMPILER_CONSTANT_DFP32_SNAN __DFP32_SNAN
#define Z_COMPILER_CONSTANT_DFP64_INFINITY __DFP64_INFINITY
#define Z_COMPILER_CONSTANT_DFP64_QNAN __DFP64_QNAN
#define Z_COMPILER_CONSTANT_DFP64_SNAN __DFP64_SNAN
#define Z_COMPILER_CONSTANT_DFP128_INFINITY __DFP128_INFINITY
#define Z_COMPILER_CONSTANT_DFP128_QNAN __DFP128_QNAN
#define Z_COMPILER_CONSTANT_DFP128_SNAN __DFP128_SNAN
#define Z_COMPILER_CONSTANT_X87_DE80_INFINITY __X87_DE80_INFINITY
#define Z_COMPILER_CONSTANT_X87_DE80_QNAN __X87_DE80_QNAN
#define Z_COMPILER_CONSTANT_X87_DE80_SNAN __X87_DE80_SNAN
#define Z_COMPILER_CONSTANT_X87_DE96_INFINITY __X87_DE96_INFINITY
#define Z_COMPILER_CONSTANT_X87_DE96_QNAN __X87_DE96_QNAN
#define Z_COMPILER_CONSTANT_X87_DE96_SNAN __X87_DE96_SNAN
#define Z_COMPILER_CONSTANT_X87_DE128_INFINITY __X87_DE128_INFINITY
#define Z_COMPILER_CONSTANT_X87_DE128_QNAN __X87_DE128_QNAN
#define Z_COMPILER_CONSTANT_X87_DE128_SNAN __X87_DE128_SNAN
#define Z_COMPILER_CONSTANT_SIZE_BITS __SIZE_BITS
#define Z_COMPILER_CONSTANT_SIZE_SIZE __SIZE_SIZE
#define Z_COMPILER_CONSTANT_USIZE_MAXIMUM __USIZE_MAXIMUM
#define Z_COMPILER_CONSTANT_SSIZE_MAXIMUM __SSIZE_MAXIMUM
#define Z_COMPILER_CONSTANT_SSIZE_MINIMUM __SSIZE_MINIMUM
#define Z_COMPILER_CONSTANT_UINTMAX_BITS __UINTMAX_BITS
#define Z_COMPILER_CONSTANT_UINTMAX_SIZE __UINTMAX_SIZE
#define Z_COMPILER_CONSTANT_UINTMAX_MAXIMUM __UINTMAX_MAXIMUM
#define Z_COMPILER_CONSTANT_SINTMAX_BITS __SINTMAX_BITS
#define Z_COMPILER_CONSTANT_SINTMAX_SIZE __SINTMAX_SIZE
#define Z_COMPILER_CONSTANT_SINTMAX_MAXIMUM __SINTMAX_MAXIMUM
#define Z_COMPILER_CONSTANT_SINTMAX_MINIMUM __SINTMAX_MINIMUM
#define Z_COMPILER_CONSTANT_INTPTR_BITS __INTPTR_BITS
#define Z_COMPILER_CONSTANT_INTPTR_SIZE __INTPTR_SIZE
#define Z_COMPILER_CONSTANT_UINTPTR_MAXIMUM __UINTPTR_MAXIMUM
#define Z_COMPILER_CONSTANT_SINTPTR_MAXIMUM __SINTPTR_MAXIMUM
#define Z_COMPILER_CONSTANT_SINTPTR_MINIMUM __SINTPTR_MINIMUM
#define Z_COMPILER_CONSTANT_POINTER_BITS __POINTER_BITS
#define Z_COMPILER_CONSTANT_POINTER_SIZE __POINTER_SIZE

#endif /* Z_inspection_compiler_modules_Clang_H */
